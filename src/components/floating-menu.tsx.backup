"use client";

import React, { useState, useEffect } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';

export function FloatingMenu() {
  const [isOpen, setIsOpen] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [showWelcome, setShowWelcome] = useState(true);
  const [isAtTop, setIsAtTop] = useState(true);
  const [isHovering, setIsHovering] = useState(false);
  const [currentView, setCurrentView] = useState('chat'); // siempre chat
  const [showLoginForm, setShowLoginForm] = useState(false);
  const [showRegisterForm, setShowRegisterForm] = useState(false);
  const [loginData, setLoginData] = useState({ email: '', password: '' });
  const [registerData, setRegisterData] = useState({ nombre: '', email: '', password: '', confirmPassword: '' });
  const [isLoading, setIsLoading] = useState(false);
  const [chatMessages, setChatMessages] = useState([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [guestName, setGuestName] = useState('');
  const [chatStarted, setChatStarted] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const router = useRouter();
  const { user, login, register } = useAuth();
  const pathname = usePathname();

  // Detectar scroll y posición en la página
  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.scrollY;
      const isNearTop = scrollTop < 100;
      setIsAtTop(isNearTop);
      
      if (scrollTop > 50) {
        setShowWelcome(false);
      } else if (scrollTop < 20 && pathname === '/') {
        setShowWelcome(true);
      }
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll();
    
    return () => window.removeEventListener('scroll', handleScroll);
  }, [pathname]);

  // Mostrar mensaje de bienvenida solo en la página principal y cuando está arriba
  useEffect(() => {
    if (pathname === '/' && isAtTop) {
      setShowWelcome(true);
    } else {
      setShowWelcome(false);
    }
  }, [pathname, isAtTop]);

  const handleOpen = () => {
    setIsOpen(true);
    setCurrentView('chat'); // Abrir directamente en vista de chat
    setTimeout(() => {
      setIsExpanded(true);
      
      // Inicializar chat con mensaje de bienvenida si no hay mensajes
      if (chatMessages.length === 0) {
        setTimeout(() => {
          const welcomeMessage = {
            id: Date.now(),
            text: user 
              ? `¡Hola ${user.name || 'Usuario'}! 👋 Soy tu asistente de ventas de ObraExpress. ¿En qué te puedo ayudar hoy? Te puedo asesorar con productos de policarbonato, precios, medidas y entregas.`
              : "¡Hola! 👋 Soy tu asistente de ventas de ObraExpress. Para brindarte una atención personalizada, me gustaría conocerte. ¿Cómo te llamas? O puedes iniciar sesión si ya tienes cuenta.",
            sender: 'ai',
            timestamp: new Date()
          };
          setChatMessages([welcomeMessage]);
          setChatStarted(true);
        }, 500);
      }
    }, 100);
  };

  const handleClose = () => {
    setIsExpanded(false);
    setTimeout(() => {
      setIsOpen(false);
      setCurrentView('main');
      setLoginData({ email: '', password: '' });
      setRegisterData({ nombre: '', email: '', password: '', confirmPassword: '' });
      setChatMessages([]);
      setCurrentMessage('');
      setGuestName('');
      setChatStarted(false);
      setIsTyping(false);
    }, 300);
  };

  const startChat = () => {
    setCurrentView('chat');
    if (!chatStarted) {
      const welcomeMessage = {
        id: Date.now(),
        text: user 
          ? `¡Hola ${user.nombre}! 👋 Soy tu asistente de ventas de ObresExpress. ¿En qué puedo ayudarte hoy? Puedo ayudarte con información sobre productos, precios, disponibilidad y mucho más.`
          : "¡Hola! 👋 Soy tu asistente de ventas de ObresExpress. Para brindarte una mejor atención personalizada, ¿podrías decirme tu nombre? O si prefieres, puedes iniciar sesión en tu cuenta.",
        sender: 'ai',
        timestamp: new Date()
      };
      setChatMessages([welcomeMessage]);
      setChatStarted(true);
    }
  };

  const sendMessage = async () => {
    if (!currentMessage.trim()) return;

    const userMessage = {
      id: Date.now(),
      text: currentMessage,
      sender: 'user',
      timestamp: new Date()
    };

    setChatMessages(prev => [...prev, userMessage]);
    setCurrentMessage('');
    setIsTyping(true);

    // Simular respuesta de IA después de un delay
    setTimeout(() => {
      let aiResponse = "";
      
      if (!user && !guestName && !chatStarted) {
        // Si es la primera interacción sin usuario logueado
        aiResponse = `¡Mucho gusto! Me alegra conocerte. Ahora puedo ayudarte de manera más personalizada. ¿En qué estás interesado hoy? Tenemos una gran variedad de productos de policarbonato, perfiles y accesorios.`;
        setGuestName(currentMessage);
      } else {
        // Respuestas inteligentes basadas en el mensaje
        const message = currentMessage.toLowerCase();
        
        if (message.includes('precio') || message.includes('costo') || message.includes('vale')) {
          aiResponse = "Te ayudo con información de precios. ¿Qué producto específico te interesa? Tenemos policarbonato alveolar, compacto, perfiles y accesorios. Los precios varían según el grosor y tamaño.";
        } else if (message.includes('policarbonato')) {
          aiResponse = "¡Excelente elección! Ofrecemos policarbonato alveolar y compacto en diferentes grosores (4mm, 6mm, 8mm, 10mm). ¿Para qué tipo de proyecto lo necesitas? Esto me ayudará a recomendarte el mejor producto.";
        } else if (message.includes('medida') || message.includes('tamaño') || message.includes('metro')) {
          aiResponse = "Manejamos medidas estándar de 2.10m x 5.80m, pero también podemos hacer cortes especiales. ¿Qué medidas necesitas específicamente?";
        } else if (message.includes('entrega') || message.includes('despacho') || message.includes('envío')) {
          aiResponse = "Realizamos entregas en toda la Región Metropolitana. El despacho es gratuito para compras sobre $100.000. ¿En qué comuna necesitas la entrega?";
        } else if (message.includes('stock') || message.includes('disponible') || message.includes('hay')) {
          aiResponse = "Te consulto el stock actualizado. ¿Podrías especificarme exactamente qué producto necesitas y en qué cantidad?";
        } else {
          aiResponse = "Entiendo tu consulta. Para darte la mejor información, ¿podrías contarme un poco más sobre tu proyecto? Así podré recomendarte los productos más adecuados y darte un presupuesto preciso.";
        }
      }

      const aiMessage = {
        id: Date.now() + 1,
        text: aiResponse,
        sender: 'ai',
        timestamp: new Date()
      };

      setChatMessages(prev => [...prev, aiMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const handleLogin = async () => {
    setIsLoading(true);
    try {
      await login(loginData.email, loginData.password);
      setShowLoginForm(false);
      // El chat seguirá abierto
    } catch (error) {
      console.error('Error en login:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegister = async () => {
    if (registerData.password !== registerData.confirmPassword) {
      alert('Las contraseñas no coinciden');
      return;
    }
    setIsLoading(true);
    try {
      await register(registerData.email, registerData.password, registerData.nombre);
      setShowRegisterForm(false);
      // El chat seguirá abierto
    } catch (error) {
      console.error('Error en registro:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleProfile = () => {
    router.push('/perfil');
    handleClose();
  };

  const handleProducts = () => {
    router.push('/productos');
    handleClose();
  };

  const handleContact = () => {
    router.push('/contacto');
    handleClose();
  };

  return (
    <>
      <style jsx>{`
        @keyframes float-bounce {
          0%, 100% {
            transform: translateY(0) scale(1);
          }
          50% {
            transform: translateY(-10px) scale(1.05);
          }
        }

        @keyframes pulse-glow {
          0%, 100% {
            box-shadow: 0 4px 20px rgba(251, 191, 36, 0.3),
                        0 0 0 0 rgba(251, 191, 36, 0.4);
          }
          50% {
            box-shadow: 0 4px 30px rgba(251, 191, 36, 0.5),
                        0 0 0 15px rgba(251, 191, 36, 0);
          }
        }

        @keyframes slide-in {
          from {
            opacity: 0;
            transform: translateX(100px);
          }
          to {
            opacity: 1;
            transform: translateX(0);
          }
        }

        @keyframes welcome-bounce {
          0%, 100% {
            transform: translateX(0);
          }
          25% {
            transform: translateX(-2px);
          }
          75% {
            transform: translateX(2px);
          }
        }

        @keyframes expand-menu {
          from {
            width: 70px;
            height: 70px;
            border-radius: 50%;
          }
          to {
            width: 400px;
            height: auto;
            border-radius: 20px;
          }
        }

        .floating-button {
          animation: float-bounce 4s ease-in-out infinite;
        }

        .floating-button:hover {
          animation: none;
          transform: scale(1.05);
        }

        .welcome-message {
          animation: slide-in 0.5s ease-out,
                     welcome-bounce 2s ease-in-out infinite;
        }

        .menu-expanded {
          animation: expand-menu 0.3s ease-out forwards;
        }

        .gradient-border {
          background: linear-gradient(135deg, #fbbf24, #f59e0b, #dc2626);
          padding: 2px;
          border-radius: 20px;
        }
      `}</style>

      {/* Mensaje de bienvenida */}
      {!isOpen && (showWelcome || isHovering) && pathname === '/' && (
        <div className={`fixed bottom-28 right-8 z-[9999] welcome-message transition-all duration-300 ease-in-out ${
          isHovering ? 'opacity-100 scale-105' : 'opacity-90 scale-100'
        }`}>
          <div className="bg-white rounded-lg shadow-xl p-4 w-[280px] border-2 border-yellow-400 relative overflow-hidden">
            {/* Contenido normal */}
            <div className={`transition-all duration-300 ease-in-out ${
              isHovering ? 'opacity-0 transform -translate-y-2' : 'opacity-100 transform translate-y-0'
            }`}>
              <p className="text-sm font-semibold text-gray-800">
                ¡Hola! 👋 ¿En qué puedo ayudarte hoy?
              </p>
              <p className="text-xs text-gray-600 mt-1">
                Haz clic en mí para ver opciones rápidas
              </p>
            </div>
            
            {/* Contenido hover */}
            <div className={`absolute top-4 left-4 right-4 transition-all duration-300 ease-in-out ${
              isHovering ? 'opacity-100 transform translate-y-0' : 'opacity-0 transform translate-y-2'
            }`}>
              <p className="text-sm font-semibold text-gray-800">
                ✨ ¡Haz clic para explorar!
              </p>
              <p className="text-xs text-gray-600 mt-1">
                Accede a opciones rápidas y más
              </p>
            </div>
          </div>
          <div className="absolute -bottom-2 right-8 w-4 h-4 bg-white border-r-2 border-b-2 border-yellow-400 transform rotate-45"></div>
        </div>
      )}

      {/* Botón flotante principal */}
      {!isOpen && (
        <button
          onClick={handleOpen}
          onMouseEnter={() => setIsHovering(true)}
          onMouseLeave={() => setIsHovering(false)}
          className="fixed bottom-8 right-8 z-[10000] w-[60px] h-[60px] rounded-2xl bg-gradient-to-br from-slate-800 via-slate-700 to-slate-900 text-white shadow-xl floating-button flex items-center justify-center transition-all duration-200 hover:shadow-2xl hover:scale-105 border border-slate-600/30 backdrop-blur-sm group"
        >
          <svg
            className="w-6 h-6 transition-all duration-200 group-hover:scale-105"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            strokeWidth={1.5}
          >
            <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 12.76c0 1.6 1.123 2.994 2.707 3.227 1.087.16 2.185.283 3.293.369V21l4.076-4.076a1.526 1.526 0 011.037-.443 48.282 48.282 0 005.68-.494c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0012 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z" />
          </svg>
        </button>
      )}

      {/* Menú expandido */}
      {isOpen && (
        <div className="fixed bottom-8 right-8 z-[10000]">
          <div className={`${isExpanded ? 'menu-expanded' : ''} transition-all duration-300 ease-out`}>
            <div className="bg-white/95 backdrop-blur-lg rounded-2xl border border-slate-200/60 shadow-2xl shadow-slate-900/10 p-5 max-h-[75vh] overflow-y-auto ring-1 ring-slate-900/5 w-[420px]">
              {isExpanded && (
                <div className="transition-all duration-500 ease-in-out">
                  {/* Chat siempre visible sin header duplicado */}
                  
                  <div className="flex items-center justify-end mb-4">
                    <button
                      onClick={handleClose}
                      className="p-2 hover:bg-slate-100 rounded-full transition-colors"
                    >
                      <svg
                        className="w-5 h-5 text-gray-600"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M6 18L18 6M6 6l12 12"
                        />
                      </svg>
                    </button>
                  </div>

                  {/* Vista Chat siempre visible */}
                  <div className="space-y-4">
                    {/* Chat Interface siempre visible */}
                    <div className="space-y-4">
                        {/* Header del chat */}
                        <div className="flex items-center justify-between pb-3 border-b border-slate-200">
                          <div className="flex items-center gap-2">
                            <div className="w-8 h-8 bg-gradient-to-br from-slate-600 to-slate-700 rounded-lg flex items-center justify-center">
                              <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" strokeWidth={1.5}>
                                <path strokeLinecap="round" strokeLinejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.847a4.5 4.5 0 003.09 3.09L15.75 12l-2.847.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.894 20.567L16.5 21.75l-.394-1.183a2.25 2.25 0 00-1.423-1.423L13.5 18.75l1.183-.394a2.25 2.25 0 001.423-1.423l.394-1.183.394 1.183a2.25 2.25 0 001.423 1.423l1.183.394-1.183.394a2.25 2.25 0 00-1.423 1.423z" />
                              </svg>
                            </div>
                            <div>
                              <h3 className="text-sm font-medium text-slate-800">Asistente ObraExpress</h3>
                              <div className="flex items-center gap-1.5">
                                <div className="w-1.5 h-1.5 bg-emerald-500 rounded-full animate-pulse"></div>
                                <span className="text-xs text-slate-500">En línea</span>
                              </div>
                            </div>
                          </div>
                        </div>

                        {/* Área de chat */}
                        <div className="bg-slate-50/50 rounded-xl p-4 h-[25vh] flex flex-col border border-slate-200/50">
                          {/* Mensajes del chat */}
                          <div className="flex-1 overflow-y-auto space-y-3 mb-4 pr-2">
                            {chatMessages.map((message, index) => (
                              <div key={message.id}>
                                <div className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                                  <div className={`max-w-[85%] rounded-2xl px-3 py-2.5 ${
                                    message.sender === 'user' 
                                      ? 'bg-gradient-to-r from-slate-700 to-slate-800 text-white shadow-sm'
                                      : 'bg-white text-slate-800 shadow-sm border border-slate-200/60'
                                  }`}>
                                    <p className="text-sm">{message.text}</p>
                                    <p className={`text-xs mt-1 ${
                                      message.sender === 'user' ? 'text-slate-300' : 'text-slate-400'
                                    }`}>
                                      {message.timestamp.toLocaleTimeString('es-CL', { hour: '2-digit', minute: '2-digit' })}
                                    </p>
                                  </div>
                                </div>
                                
                                {/* Botones de login después del primer mensaje del bot si no está logueado */}
                                {message.sender === 'ai' && index === 0 && !user && (
                                  <div className="flex justify-start mt-2">
                                    <div className="max-w-[85%] bg-gradient-to-r from-slate-50 to-slate-100/80 rounded-2xl px-3 py-2.5 border border-slate-200">
                                      <p className="text-xs font-medium text-slate-600 mb-2">
                                        Para una experiencia personalizada:
                                      </p>
                                      <div className="flex gap-2">
                                        <button
                                          onClick={() => {
                                            setShowLoginForm(true);
                                            setShowRegisterForm(false);
                                          }}
                                          className="bg-white hover:bg-slate-50 text-slate-700 font-medium py-1.5 px-3 rounded-lg border border-slate-300 transition-all duration-200 text-xs flex items-center gap-1.5 shadow-sm"
                                        >
                                          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
                                          </svg>
                                          Iniciar Sesión
                                        </button>
                                        <button
                                          onClick={() => {
                                            setShowRegisterForm(true);
                                            setShowLoginForm(false);
                                          }}
                                          className="bg-gradient-to-r from-slate-700 to-slate-800 hover:from-slate-800 hover:to-slate-900 text-white font-medium py-1.5 px-3 rounded-lg transition-all duration-200 text-xs flex items-center gap-1.5 shadow-sm"
                                        >
                                          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                                          </svg>
                                          Crear Cuenta
                                        </button>
                                      </div>
                                    </div>
                                  </div>
                                )}
                              </div>
                            ))}
                            
                            {/* Indicador de escritura */}
                            {isTyping && (
                              <div className="flex justify-start">
                                <div className="bg-white rounded-2xl px-3 py-2 max-w-[85%] shadow-sm">
                                  <div className="flex items-center gap-1">
                                    <div className="flex gap-1">
                                      <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"></div>
                                      <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                                      <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                                    </div>
                                    <span className="text-xs text-gray-500 ml-2">Escribiendo...</span>
                                  </div>
                                </div>
                              </div>
                            )}
                          </div>
                          
                          {/* Input de mensaje */}
                          <div className="flex gap-2">
                            <input
                              type="text"
                              value={currentMessage}
                              onChange={(e) => setCurrentMessage(e.target.value)}
                              onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                              placeholder="Escribe tu mensaje..."
                              className="flex-1 px-3 py-2 border border-slate-300 rounded-xl focus:ring-2 focus:ring-slate-500 focus:border-transparent text-sm bg-white shadow-sm placeholder:text-slate-400"
                            />
                            <button
                              onClick={sendMessage}
                              disabled={!currentMessage.trim()}
                              className="bg-gradient-to-r from-slate-600 to-slate-700 hover:from-slate-700 hover:to-slate-800 disabled:opacity-50 disabled:cursor-not-allowed text-white p-2 rounded-xl transition-all duration-200 shadow-sm"
                            >
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                              </svg>
                            </button>
                          </div>
                        </div>

                        {/* Formularios de login/registro dentro del chat */}
                        {showLoginForm && (
                          <div className="bg-slate-50/50 rounded-xl p-4 border border-slate-200 mt-4">
                            <div className="flex items-center justify-between mb-3">
                              <h3 className="text-sm font-semibold text-slate-800">Iniciar Sesión</h3>
                              <button
                                onClick={() => setShowLoginForm(false)}
                                className="text-slate-400 hover:text-slate-600 transition-colors"
                              >
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                </svg>
                              </button>
                            </div>
                            <div className="space-y-3">
                              <div>
                                <input
                                  type="email"
                                  placeholder="Correo electrónico"
                                  value={loginData.email}
                                  onChange={(e) => setLoginData({...loginData, email: e.target.value})}
                                  className="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-slate-500 focus:border-transparent"
                                />
                              </div>
                              <div>
                                <input
                                  type="password"
                                  placeholder="Contraseña"
                                  value={loginData.password}
                                  onChange={(e) => setLoginData({...loginData, password: e.target.value})}
                                  className="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-slate-500 focus:border-transparent"
                                />
                              </div>
                              <button
                                onClick={handleLogin}
                                disabled={isLoading}
                                className="w-full bg-gradient-to-r from-slate-700 to-slate-800 hover:from-slate-800 hover:to-slate-900 text-white font-medium py-2 rounded-lg transition-all duration-200 disabled:opacity-50 text-sm"
                              >
                                {isLoading ? 'Iniciando sesión...' : 'Iniciar Sesión'}
                              </button>
                            </div>
                          </div>
                        )}

                        {showRegisterForm && (
                          <div className="bg-slate-50/50 rounded-xl p-4 border border-slate-200 mt-4">
                            <div className="flex items-center justify-between mb-3">
                              <h3 className="text-sm font-semibold text-slate-800">Crear Cuenta</h3>
                              <button
                                onClick={() => setShowRegisterForm(false)}
                                className="text-slate-400 hover:text-slate-600 transition-colors"
                              >
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                </svg>
                              </button>
                            </div>
                            <div className="space-y-3">
                              <div>
                                <input
                                  type="text"
                                  placeholder="Nombre completo"
                                  value={registerData.nombre}
                                  onChange={(e) => setRegisterData({...registerData, nombre: e.target.value})}
                                  className="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-slate-500 focus:border-transparent"
                                />
                              </div>
                              <div>
                                <input
                                  type="email"
                                  placeholder="Correo electrónico"
                                  value={registerData.email}
                                  onChange={(e) => setRegisterData({...registerData, email: e.target.value})}
                                  className="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-slate-500 focus:border-transparent"
                                />
                              </div>
                              <div>
                                <input
                                  type="password"
                                  placeholder="Contraseña"
                                  value={registerData.password}
                                  onChange={(e) => setRegisterData({...registerData, password: e.target.value})}
                                  className="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-slate-500 focus:border-transparent"
                                />
                              </div>
                              <div>
                                <input
                                  type="password"
                                  placeholder="Confirmar contraseña"
                                  value={registerData.confirmPassword}
                                  onChange={(e) => setRegisterData({...registerData, confirmPassword: e.target.value})}
                                  className="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-slate-500 focus:border-transparent"
                                />
                              </div>
                              <button
                                onClick={handleRegister}
                                disabled={isLoading}
                                className="w-full bg-gradient-to-r from-slate-700 to-slate-800 hover:from-slate-800 hover:to-slate-900 text-white font-medium py-2 rounded-lg transition-all duration-200 disabled:opacity-50 text-sm"
                              >
                                {isLoading ? 'Creando cuenta...' : 'Crear Cuenta'}
                              </button>
                            </div>
                          </div>
                        )}

                        {/* Accesos rápidos */}
                        <div className="border-t border-slate-200 pt-4 mt-4">
                          <p className="text-sm font-medium text-slate-700 mb-3">Accesos directos</p>
                          <div className="grid grid-cols-3 gap-2">
                            <button
                              onClick={handleProducts}
                              className="bg-slate-50 hover:bg-slate-100 text-slate-800 font-medium p-3 rounded-xl transition-all duration-200 flex flex-col items-center gap-2 text-center shadow-sm border border-slate-200/60"
                            >
                              <svg className="w-5 h-5 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" strokeWidth={1.5}>
                                <path strokeLinecap="round" strokeLinejoin="round" d="M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z" />
                              </svg>
                              <div className="text-xs font-medium text-slate-700">Productos</div>
                            </button>

                            <button
                              onClick={handleContact}
                              className="bg-slate-50 hover:bg-slate-100 text-slate-800 font-medium p-3 rounded-xl transition-all duration-200 flex flex-col items-center gap-2 text-center shadow-sm border border-slate-200/60"
                            >
                              <svg className="w-5 h-5 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" strokeWidth={1.5}>
                                <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 6.75c0 8.284 6.716 15 15 15h2.25a2.25 2.25 0 002.25-2.25v-1.372c0-.516-.351-.966-.852-1.091l-4.423-1.106c-.44-.11-.902.055-1.173.417l-.97 1.293c-.282.376-.769.542-1.21.38a12.035 12.035 0 01-7.143-7.143c-.162-.441.004-.928.38-1.21l1.293-.97c.363-.271.527-.734.417-1.173L6.963 3.102a1.125 1.125 0 00-1.091-.852H4.5A2.25 2.25 0 002.25 4.5v2.25z" />
                              </svg>
                              <div className="text-xs font-medium text-slate-700">Contacto</div>
                            </button>

                            <button
                              onClick={() => {
                                router.push('/coordinador-despacho');
                                handleClose();
                              }}
                              className="bg-slate-50 hover:bg-slate-100 text-slate-800 font-medium p-3 rounded-xl transition-all duration-200 flex flex-col items-center gap-2 text-center shadow-sm border border-slate-200/60"
                            >
                              <svg className="w-5 h-5 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" strokeWidth={1.5}>
                                <path strokeLinecap="round" strokeLinejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5a2.25 2.25 0 002.25-2.25m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5a2.25 2.25 0 012.25 2.25v7.5" />
                              </svg>
                              <div className="text-xs font-medium text-slate-700">Despachos</div>
                            </button>
                          </div>

                          {/* Información adicional */}
                          <div className="bg-slate-50/80 rounded-xl p-3 text-center mt-4 border border-slate-200/40">
                            <p className="text-xs text-slate-600">Asistente disponible 24/7</p>
                            <p className="text-xs font-medium text-slate-700 mt-1">Respuesta inmediata</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}