import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';
import { supabaseAdmin } from '@/lib/supabase';
import { validarProductoParaWeb, formatearDimension, detectarCambioPrecio } from '@/modules/products/utils/product-validation';

// ID de tu Google Sheet
const SHEET_ID = '1n9wJx1-lUDcoIxV4uo6GkB8eywdH2CsGIUlQTt_hjIc';

// Funci√≥n para obtener imagen por defecto basada en tipo y color
function getDefaultImage(tipo: string, color?: string): string {
  const imageMap: Record<string, Record<string, string>> = {
    'Ondulado': {
      'Clear': '/assets/images/Productos/Policarnato Ondulado/policarbonato_ondulado_opal_perspectiva.webp',
      'Bronce': '/assets/images/Productos/Policarnato Ondulado/policarbonato_ondulado_opal_perspectiva.webp',
      'Opal': '/assets/images/Productos/Policarnato Ondulado/policarbonato_ondulado_opal_perspectiva.webp',
      'default': '/assets/images/Productos/Policarnato Ondulado/policarbonato_ondulado_opal_perspectiva.webp'
    },
    'Alveolar': {
      'Clear': '/assets/images/Productos/Policarbonato Alveolar/policarbonato_alveolar_clear.webp',
      'Bronce': '/assets/images/Productos/Policarbonato Alveolar/policarbonato_alveolar_bronce.webp',
      'default': '/assets/images/Productos/Policarbonato Alveolar/policarbonato_alveolar.webp'
    },
    'Compacto': {
      'Clear': '/assets/images/Productos/Policarbonato Compacto/policarbonato_compacto Clear.webp',
      'Solid': '/assets/images/Productos/Policarbonato Compacto/policarbonato_compacto Solid.webp',
      'default': '/assets/images/Productos/Policarbonato Compacto/policarbonato_compacto.webp'
    },
    'Perfiles': {
      'default': '/assets/images/Productos/Perfiles/perfil.webp'
    },
    'Perfil': {
      'default': '/assets/images/Productos/Perfiles/perfil.webp'
    },
    'Accesorios': {
      'default': '/assets/images/Productos/Accesorios/accesorio.webp'
    },
    'Accesorio': {
      'default': '/assets/images/Productos/Accesorios/accesorio.webp'
    }
  };

  // Buscar por coincidencia exacta primero
  let tipoKey = Object.keys(imageMap).find(key => 
    key.toLowerCase() === tipo.toLowerCase()
  );

  // Si no encuentra exacta, buscar por contiene
  if (!tipoKey) {
    tipoKey = Object.keys(imageMap).find(key => 
      tipo.toLowerCase().includes(key.toLowerCase()) || key.toLowerCase().includes(tipo.toLowerCase())
    );
  }

  if (!tipoKey) {
    return '/assets/images/Productos/rollo_policarbonato_2mm_cristal.webp';
  }

  const colorOptions = imageMap[tipoKey];
  return colorOptions[color || 'default'] || colorOptions['default'];
}

// Funci√≥n para validar si existe imagen de un producto
function validarImagenProducto(codigo: string, tipo: string, categoria: string, color?: string): { tieneImagen: boolean, rutaImagen?: string } {
  const basePath = path.join(process.cwd(), 'public', 'assets', 'images', 'Productos');
  
  // Mapear categor√≠as a carpetas
  const carpetasPorCategoria: Record<string, Record<string, string> | string> = {
    'Policarbonato': {
      'Alveolar': 'Policarbonato Alveolar',
      'Compacto': 'Policarbonato Compacto', 
      'Ondulado': 'Policarnato Ondulado' // Nota: hay typo en la carpeta existente
    },
    'Perfiles': 'Perfiles',
    'Accesorios': 'Accesorios'
  };
  
  // Obtener ruta de carpeta seg√∫n categor√≠a y tipo
  let carpetaProducto = '';
  if (categoria === 'Policarbonato') {
    const subcarpetas = carpetasPorCategoria['Policarbonato'] as Record<string, string>;
    carpetaProducto = subcarpetas[tipo] || categoria;
  } else if (categoria === 'Perfiles') {
    carpetaProducto = 'Perfiles';
  } else if (categoria === 'Accesorios') {
    carpetaProducto = 'Accesorios';
  } else {
    // Carpeta gen√©rica
    carpetaProducto = categoria;
  }
  
  const carpetaCompleta = path.join(basePath, carpetaProducto);
  
  // Extensiones de imagen comunes
  const extensiones = ['.webp', '.jpg', '.jpeg', '.png'];
  
  // Buscar archivo con el c√≥digo del producto
  for (const ext of extensiones) {
    const rutaImagen = path.join(carpetaCompleta, `${codigo}${ext}`);
    if (fs.existsSync(rutaImagen)) {
      return {
        tieneImagen: true,
        rutaImagen: `/assets/images/Productos/${carpetaProducto}/${codigo}${ext}`
      };
    }
  }
  
  // Buscar im√°genes gen√©ricas por tipo si no hay imagen espec√≠fica
  const nombresGenericos = [
    `policarbonato_${tipo.toLowerCase()}`,
    `${tipo.toLowerCase()}`,
    `${categoria.toLowerCase()}_${tipo.toLowerCase()}`,
    `${categoria.toLowerCase().replace(/s$/, '')}`, // perfil sin s final
    categoria.toLowerCase() // nombre de categor√≠a directo
  ];
  
  for (const nombreGenerico of nombresGenericos) {
    for (const ext of extensiones) {
      const rutaImagen = path.join(carpetaCompleta, `${nombreGenerico}${ext}`);
      if (fs.existsSync(rutaImagen)) {
        return {
          tieneImagen: true,
          rutaImagen: `/assets/images/Productos/${carpetaProducto}/${nombreGenerico}${ext}`
        };
      }
    }
  }
  
  // Si no encuentra imagen espec√≠fica, usar imagen por defecto
  const imagenPorDefecto = getDefaultImage(tipo, color);
  
  // Verificar si existe la imagen por defecto f√≠sicamente
  const rutaImagenPorDefecto = path.join(process.cwd(), 'public', imagenPorDefecto);
  if (fs.existsSync(rutaImagenPorDefecto)) {
    return {
      tieneImagen: true,
      rutaImagen: imagenPorDefecto
    };
  }
  
  return { tieneImagen: false };
}

// Funci√≥n para mapear nombres de pesta√±as a categor√≠as amigables
function obtenerNombreCategoria(sheetName: string): string {
  const mapeoNombres: Record<string, string> = {
    'Sheet1': 'Policarbonato',
    'Hoja1': 'Policarbonato', 
    'Policarbonato': 'Policarbonato',
    'Policarbonatos': 'Policarbonato',
    'Perfiles': 'Perfiles',
    'Perfil': 'Perfiles',
    'Profile': 'Perfiles', 
    'Profiles': 'Perfiles',
    'Kits': 'Kits',
    'Kit': 'Kits',
    'Herramientas': 'Herramientas',
    'Herramienta': 'Herramientas',
    'Tools': 'Herramientas',
    'Accesorios': 'Accesorios',
    'Accessorios': 'Accesorios',
    'Productos': 'Productos',
    'Products': 'Productos',
    'Inventario': 'Inventario',
    'Inventory': 'Inventario',
    'Materiales': 'Materiales',
    'Materials': 'Materiales'
  };
  
  return mapeoNombres[sheetName] || sheetName;
}

// Funci√≥n para obtener todos los nombres de pesta√±as del Google Sheet
async function obtenerNombresPesta√±as() {
  try {
    // Usar la API de Google Sheets para obtener informaci√≥n del spreadsheet
    const metadataUrl = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}?key=${process.env.GOOGLE_SHEETS_API_KEY}&fields=sheets(properties(title))`;
    
    // Si no hay API key, usar nombres por defecto
    if (!process.env.GOOGLE_SHEETS_API_KEY) {
      console.log('‚ö†Ô∏è No hay API key, intentando detectar pesta√±as por fuerza bruta...');
      return await detectarPesta√±asPorFuerzaBruta();
    }
    
    const response = await fetch(metadataUrl);
    if (response.ok) {
      const data = await response.json();
      const pesta√±as = data.sheets?.map((sheet: any) => sheet.properties.title) || [];
      console.log(`üìã Pesta√±as detectadas via API:`, pesta√±as);
      return pesta√±as;
    } else {
      console.log('‚ö†Ô∏è API fall√≥, intentando detectar por fuerza bruta...');
      return await detectarPesta√±asPorFuerzaBruta();
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Error en API, intentando detectar por fuerza bruta...', error);
    return await detectarPesta√±asPorFuerzaBruta();
  }
}

// Funci√≥n alternativa para detectar pesta√±as probando nombres comunes
async function detectarPesta√±asPorFuerzaBruta() {
  const pesta√±asPosibles = [
    'Sheet1', 'Hoja1', 
    'Policarbonato', 'Policarbonatos',
    'Kits', 'Kit',
    'Herramientas', 'Herramienta', 'Tools',
    'Accesorios', 'Accessorios',
    'Productos', 'Products',
    'Inventario', 'Inventory',
    'Materiales', 'Materials',
    'Perfiles', 'Perfil', 'Profile', 'Profiles'
  ];
  
  const pesta√±asExistentes = [];
  
  for (const nombre of pesta√±asPosibles) {
    try {
      const testUrl = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/gviz/tq?tqx=out:csv&sheet=${encodeURIComponent(nombre)}`;
      const response = await fetch(testUrl, {
        redirect: 'follow',
        headers: { 'User-Agent': 'Mozilla/5.0' }
      });
      
      if (response.ok) {
        const content = await response.text();
        // Verificar que tiene contenido v√°lido (headers + al menos 1 fila de datos)
        const lines = content.trim().split('\n');
        if (lines.length >= 2 && lines[0].includes(',')) {
          pesta√±asExistentes.push(nombre);
          console.log(`‚úÖ Pesta√±a encontrada: ${nombre}`);
        }
      }
    } catch (error) {
      // Silencioso, solo est√° probando
    }
  }
  
  console.log(`üìã Pesta√±as detectadas por fuerza bruta:`, pesta√±asExistentes);
  return pesta√±asExistentes.length > 0 ? pesta√±asExistentes : ['Sheet1'];
}

// Funci√≥n para parsear CSV correctamente
function parsearCSV(csvData: string) {
  return csvData.trim().split('\n').map(row => {
    const cells = [];
    let currentCell = '';
    let inQuotes = false;
    
    for (let i = 0; i < row.length; i++) {
      const char = row[i];
      
      if (char === '"' && (i === 0 || row[i-1] === ',')) {
        inQuotes = true;
      } else if (char === '"' && (i === row.length - 1 || row[i+1] === ',')) {
        inQuotes = false;
      } else if (char === ',' && !inQuotes) {
        cells.push(currentCell.trim());
        currentCell = '';
        continue;
      } else {
        currentCell += char;
      }
    }
    
    // Agregar la √∫ltima celda
    if (currentCell) {
      cells.push(currentCell.trim());
    }
    
    return cells;
  });
}

// Funci√≥n para procesar datos de una pesta√±a
async function procesarPesta√±a(sheetName: string) {
  console.log(`\nüìä Procesando pesta√±a: ${sheetName}`);
  
  const csvUrl = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/gviz/tq?tqx=out:csv&sheet=${encodeURIComponent(sheetName)}`;
  console.log('üìä Obteniendo datos desde:', csvUrl);
  
  try {
    const response = await fetch(csvUrl, {
      redirect: 'follow',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    if (!response.ok) {
      console.log(`‚ùå Error accediendo a pesta√±a ${sheetName}: ${response.status}`);
      return { variantes: [], error: `Error ${response.status}` };
    }

    const csvData = await response.text();
    
    if (!csvData || csvData.trim().length === 0) {
      console.log(`‚ö†Ô∏è Pesta√±a ${sheetName} est√° vac√≠a`);
      return { variantes: [], error: 'Pesta√±a vac√≠a' };
    }

    console.log(`üìã Datos obtenidos de ${sheetName}, primera l√≠nea:`, csvData.split('\n')[0]);
    
    const rows = parsearCSV(csvData);
    console.log(`üìã Procesando ${rows.length} filas de ${sheetName}...`);
    
    // Procesar headers y datos
    const headers = rows[0];
    const dataRows = rows.slice(1).filter(row => row.length > 1 && row[0]); // Filtrar filas vac√≠as

    console.log(`üìù Headers de ${sheetName}:`, headers);
    console.log(`üì¶ Filas de datos v√°lidas en ${sheetName}: ${dataRows.length}`);

    // Buscar √≠ndices de columnas
    const findIndex = (searchTerms: string[]) => {
      return headers.findIndex(header => 
        searchTerms.some(term => 
          header.toLowerCase().includes(term.toLowerCase())
        )
      );
    };

    // Mapeo directo basado en la estructura exacta del Google Sheets
    // Columnas del Google Sheets (0-indexed):
    // A(0):SKU, B(1):Producto, C(2):Tipo, D(3):Espesor mm, E(4):Ancho m, F(5):Largo m, 
    // G(6):Color, H(7):Uso, I(8):Precio Neto, J(9):Costo proveedor, K(10):IVA incluido,
    // L(11):Ganancia, M(12):Margen, N(13):Stock, O(14):Proveedor
    const indices = {
      codigo: 0,           // A: SKU
      nombre: 1,           // B: Producto  
      tipo: 2,             // C: Tipo (Ondulado, Alveolar, etc.)
      espesor: 3,          // D: Espesor milimetros
      ancho: 4,            // E: Ancho metros
      largo: 5,            // F: Largo metros
      color: 6,            // G: Color
      uso: 7,              // H: Uso
      precioNeto: 8,       // I: Precio Neto
      costoProveedor: 9,   // J: Costo por proveedor
      ivaIncluido: 10,     // K: IVA incluido
      ganancia: 11,        // L: Ganancia
      margen: 12,          // M: Margen
      stock: 13,           // N: Stock
      proveedor: 14,       // O: Proveedor
      factorVentaSobreCosto: 15, // P: Factor de venta sobre costo (si existe)
      dimensiones: -1      // No existe como columna separada
    };

    console.log(`üîç √çndices encontrados en ${sheetName}:`, indices);

    // Convertir datos a formato JSON con precios corregidos
    const variantes = dataRows.map((row, index) => {
      const codigo = row[indices.codigo] || `${sheetName}-${index}`;
      const nombre = row[indices.nombre] || 'Sin nombre';
      const categoriaOriginal = row[indices.tipo] || row[2] || ''; // Usar √≠ndice tipo correctamente
      
      // Log detallado para diagn√≥stico
      if (index < 5) { // Primeros 5 productos para debug
        console.log(`üìä [${sheetName}] Producto ${index}:`, {
          SKU: codigo,
          Tipo: categoriaOriginal || 'SIN TIPO',
          TipoRaw: row[2],
          Ancho: row[indices.ancho] || 'N/A',
          Largo: row[indices.largo] || 'N/A',
          EspesorRaw: row[indices.espesor] || 'N/A'
        });
      }
      
      // Parsear n√∫meros con formato chileno: "$7.523" = 7523 pesos
      const costoProveedorStr = row[indices.costoProveedor] || '0';
      const precioNetoStr = row[indices.precioNeto] || '0';
      const stockStr = row[indices.stock] || '0';
      const factorVentaStr = row[indices.factorVentaSobreCosto] || '100'; // Default 100% si no est√° especificado
      
      const costoProveedor = parseFloat(
        costoProveedorStr.toString()
          .replace(/[$\s]/g, '') // Remover $ y espacios
          .replace(/\./g, '') // Remover puntos (separadores de miles)
          .replace(/,/g, '.') // Convertir comas a puntos (decimales)
        || '0'
      );
      
      const precioNeto = parseFloat(
        precioNetoStr.toString()
          .replace(/[$\s]/g, '') // Remover $ y espacios
          .replace(/\./g, '') // Remover puntos (separadores de miles)
          .replace(/,/g, '.') // Convertir comas a puntos (decimales)
        || '0'
      );
      
      // NUEVA L√ìGICA: Factor de venta sobre costo
      let factorVentaSobreCosto = parseFloat(
        factorVentaStr.toString()
          .replace(/[$\s%]/g, '') // Remover $, espacios y %
          .replace(/,/g, '.') // Convertir comas a puntos (decimales)
        || '100' // Default 100% si no est√° especificado
      );
      
      // CORRECCI√ìN: Si el valor es muy peque√±o (< 10), probablemente est√° en formato decimal (ej: 1.84 = 184%)
      if (factorVentaSobreCosto > 0 && factorVentaSobreCosto < 10) {
        factorVentaSobreCosto = factorVentaSobreCosto * 100; // Convertir 1.84 a 184
      }
      
      const stock = parseInt(stockStr.toString().replace(/[^0-9]/g, '') || '0');
      
      // C√ÅLCULO DE PRECIO CON FACTOR: Costo * (Factor / 100) 
      // Ejemplo: Costo $1000 * Factor 140% = Precio Venta $1400
      const precioVentaCalculado = costoProveedor > 0 ? costoProveedor * (factorVentaSobreCosto / 100) : precioNeto;
      
      // Usar el precio calculado con factor o el del Excel (por compatibilidad)
      const precioVenta = precioVentaCalculado > 0 ? precioVentaCalculado : precioNeto;
      const ganancia = precioVenta - costoProveedor;
      const margenGanancia = precioVenta > 0 ? ((ganancia / precioVenta) * 100).toFixed(2) : '0';
      
      // Log para debugging del nuevo c√°lculo (solo primeros 3 productos)
      if (index < 3) {
        console.log(`üí∞ [${sheetName}] Producto ${codigo}:`, {
          costo_proveedor: costoProveedor,
          factor_venta_sobre_costo: factorVentaSobreCosto + '%',
          precio_calculado: precioVentaCalculado,
          precio_final: precioVenta,
          ganancia: ganancia,
          margen: margenGanancia + '%'
        });
      }
      
      // Obtener proveedor de la columna correcta (posici√≥n 14)
      const proveedorReal = row[indices.proveedor] && row.length > indices.proveedor ? 
        row[indices.proveedor] || 'Leker' : 'Leker';
      
      // REGLAS DE NEGOCIO PARA MOSTRAR EN WEB - VALIDACI√ìN ESTRICTA DE SKU
      const esSkuValido = (sku: string): boolean => {
        if (!sku || sku.trim() === '') return false;
        
        const skuLimpio = sku.toLowerCase().trim();
        
        // Rechazar c√≥digos que no son SKUs reales
        const textosInvalidos = [
          'falso', 'test', 'prueba', 'ejemplo', 'sample',
          'aplicaci√≥n t√≠pica', 'aplicacion tipica', 't√≠pica', 'tipica',
          'descripci√≥n', 'descripcion', 'detalle', 'informaci√≥n', 'informacion',
          'uso t√≠pico', 'uso tipico', 'usos', 'caracter√≠sticas', 'caracteristicas',
          'especificaciones', 'especificacion', 'notas', 'observaciones',
          'medidas t√≠picas', 'medidas tipicas', 'dimensiones t√≠picas',
          'colores disponibles', 'colores', 'acabados', 'terminaciones',
          'instalaci√≥n', 'instalacion', 'montaje', 'aplicaciones',
          'ventajas', 'beneficios', 'propiedades', 'garant√≠a', 'garantia'
        ];
        
        // Si contiene cualquier texto inv√°lido, rechazar
        for (const textoInvalido of textosInvalidos) {
          if (skuLimpio.includes(textoInvalido)) {
            return false;
          }
        }
        
        // Rechazar si es igual al nombre de la pesta√±a
        if (skuLimpio === sheetName.toLowerCase()) {
          return false;
        }
        
        // Rechazar c√≥digos que son solo el prefijo de la pesta√±a
        if (sku === `${sheetName}-` || sku === `${sheetName}_` || sku === sheetName) {
          return false;
        }
        
        // Un SKU v√°lido debe tener al menos 3 caracteres y contener n√∫meros o letras en may√∫sculas
        if (sku.length < 3) return false;
        
        // Debe contener al menos un n√∫mero o una letra may√∫scula (patr√≥n t√≠pico de SKU)
        const tieneNumeroOLetraMayuscula = /[0-9A-Z]/.test(sku);
        if (!tieneNumeroOLetraMayuscula) return false;
        
        return true;
      };
      
      const tieneSkuValido = esSkuValido(codigo);
      
      // Log de productos rechazados por SKU inv√°lido para debugging
      if (!tieneSkuValido) {
        console.log(`‚ùå SKU rechazado: "${codigo}" en pesta√±a "${sheetName}" - No es un c√≥digo v√°lido`);
      }
      
      const tieneStockMinimo = stock >= 10; // Stock m√≠nimo 10 unidades para mostrar en web (9 o menos se oculta autom√°ticamente)
      
      // Validar imagen del producto
      const validacionImagen = validarImagenProducto(codigo, row[indices.tipo] || sheetName, obtenerNombreCategoria(sheetName), row[indices.color]);
      const tieneImagen = validacionImagen.tieneImagen;
      
      // IMPORTANTE: Con stock < 10 el producto se oculta autom√°ticamente
      const disponibleEnWeb = tieneSkuValido && tieneStockMinimo && tieneImagen;
      
      // Obtener y parsear medidas con formato chileno (comas como decimales)
      const espesorRaw = row[indices.espesor] || '';
      const anchoRaw = row[indices.ancho] || ''; // Columna E del Google Sheets
      const largoRaw = row[indices.largo] || '';  // Columna F del Google Sheets
      const dimensiones = anchoRaw; // Usar ancho como dimensiones para compatibilidad

      // Funci√≥n para parsear n√∫meros con comas decimales (formato chileno)
      const parsearDecimal = (valor, tipo = '') => {
        if (!valor || valor === '') return '';
        let valorStr = valor.toString().trim();
        
        // Debug: log para TODOS los valores con comas decimales
        if (valorStr.includes(',') && valorStr.match(/\d+,\d+/)) {
          console.log('üîç DEBUG COMA - Valor con coma decimal encontrado:', valor, 'Tipo:', typeof valor);
        }
        
        // Conversi√≥n especial para ancho: si es 81 o 0.81, convertir a 0,81
        if (tipo === 'ancho') {
          // Limpiar de posibles unidades
          valorStr = valorStr.replace(/cm|m|mm/gi, '').trim();
          
          // Si es 81 o 81.0, convertir a 0,81
          const numValue = parseFloat(valorStr.replace(',', '.'));
          if (numValue === 81 || numValue === 81.0) {
            return '0,81';
          }
          // Si es 0.81, mantener como 0,81 con coma
          if (numValue === 0.81) {
            return '0,81';
          }
        }
        
        // Mantener el formato original del Excel (conservar comas como decimales)
        return valorStr;
      };

      // Parsear dimensiones correctamente
      const espesorParsed = parsearDecimal(espesorRaw, 'espesor');
      const anchoParsed = parsearDecimal(anchoRaw, 'ancho');
      const largoParsed = parsearDecimal(largoRaw, 'largo');

      return {
        codigo,
        nombre: nombre, // Producto desde Excel
        descripcion: `Policarbonato ${categoriaOriginal || 'Standard'}`,
        categoria: 'Policarbonato', // Categor√≠a principal
        tipo: categoriaOriginal || 'Standard', // Tipo espec√≠fico: Ondulado, Alveolar, Compacto
        costo_proveedor: costoProveedor,
        precio_neto: Math.round(precioVenta),
        precio_con_iva: Math.round(precioVenta * 1.19),
        ganancia: Math.round(ganancia),
        margen_ganancia: `${margenGanancia}%`,
        factor_venta_sobre_costo: factorVentaSobreCosto, // NUEVO CAMPO
        espesor: espesorParsed,
        // Campos separados para medidas (ya parseados)
        ancho: anchoParsed,
        largo: largoParsed,
        // Mantener dimensiones para compatibilidad
        dimensiones: dimensiones,
        color: row[indices.color] || 'Sin especificar',
        uso: row[indices.uso] || "Uso general",
        stock: stock,
        uv_protection: true,
        garantia: "10 a√±os",
        proveedor: proveedorReal,
        pesta√±a_origen: sheetName, // NUEVO: rastrear de qu√© pesta√±a viene
        orden_original: index, // NUEVO: preservar orden del Google Sheets
        // NUEVOS CAMPOS PARA REGLAS DE NEGOCIO
        tiene_sku_valido: tieneSkuValido,
        tiene_stock_minimo: tieneStockMinimo,
        tiene_imagen: tieneImagen,
        ruta_imagen: validacionImagen.rutaImagen || null,
        disponible_en_web: disponibleEnWeb,
        motivo_no_disponible: !disponibleEnWeb ? 
          (!tieneSkuValido ? 'SKU inv√°lido o de prueba' : 
           !tieneStockMinimo ? 'Stock insuficiente (m√≠nimo 9)' :
           !tieneImagen ? 'Sin imagen de producto' : 'No disponible') 
          : null
      };
    }).filter(v => {
      // Validaci√≥n estricta: Solo productos con SKU v√°lido y datos econ√≥micos v√°lidos
      const tieneSkuReal = v.tiene_sku_valido && v.codigo && v.codigo.length >= 3;
      const tieneDatosEconomicos = (v.precio_neto > 0 || v.costo_proveedor > 0);
      const isValidProduct = tieneSkuReal && tieneDatosEconomicos;
      
      if (!isValidProduct) {
        const motivos = [];
        if (!tieneSkuReal) motivos.push('SKU inv√°lido');
        if (!tieneDatosEconomicos) motivos.push('Sin datos de precio/costo');
        
        console.log(`üóëÔ∏è Producto excluido de ${sheetName}: "${v.codigo}" - ${motivos.join(', ')}`);
      }
      
      return isValidProduct;
    });

    console.log(`‚úÖ Procesados ${variantes.length} productos v√°lidos de la pesta√±a ${sheetName}`);
    return { variantes, headers, indices };
    
  } catch (error) {
    console.error(`‚ùå Error procesando pesta√±a ${sheetName}:`, error);
    return { variantes: [], error: error instanceof Error ? error.message : 'Error desconocido' };
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ Sincronizaci√≥n autom√°tica de todas las pesta√±as...');
    
    // DETECCI√ìN AUTOM√ÅTICA DE PESTA√ëAS
    const pesta√±asDetectadas = await obtenerNombresPesta√±as();
    console.log(`üìã Total pesta√±as encontradas: ${pesta√±asDetectadas.length}`, pesta√±asDetectadas);
    
    // üéØ FILTRO DE NEGOCIO: Solo procesar Policarbonato, Perfiles y Accesorios (pesta√±as completas)
    const pesta√±asPermitidas = [
      'Sheet1', 'Hoja1', 
      'Policarbonato', 'Policarbonatos', 
      'Perfiles', 'Perfil', 'Profile', 'Profiles',
      'Accesorios', 'Accesorio', 'Accessories', 'Accessory'
    ];
    const pesta√±asAProcessar = pesta√±asDetectadas.filter(pesta√±a => 
      pesta√±asPermitidas.includes(pesta√±a)
    );
    
    console.log(`üéØ Pesta√±as filtradas para web (Policarbonato, Perfiles, Accesorios): ${pesta√±asAProcessar.length}`, pesta√±asAProcessar);
    console.log(`‚ùå Pesta√±as excluidas: ${pesta√±asDetectadas.length - pesta√±asAProcessar.length}`, 
      pesta√±asDetectadas.filter(p => !pesta√±asPermitidas.includes(p))
    );
    
    // Procesar solo las pesta√±as permitidas
    const todasLasVariantes: any[] = [];
    const estadisticasPorPesta√±a: any[] = [];
    const pesta√±asProcesadas: string[] = [];
    const pesta√±asUnicas = new Map<string, string>(); // hash -> nombre de pesta√±a
    
    for (const sheetName of pesta√±asAProcessar) {
      const resultado = await procesarPesta√±a(sheetName);
      
      if (resultado.variantes.length > 0) {
        // Crear hash del contenido para detectar duplicados - usar solo c√≥digos para ser m√°s simple y efectivo
        const codigos = resultado.variantes.map(v => v.codigo).sort().join(',');
        const contenidoHash = `${resultado.variantes.length}-${codigos}`;
        
        // Solo procesar si es contenido √∫nico
        if (!pesta√±asUnicas.has(contenidoHash)) {
          pesta√±asUnicas.set(contenidoHash, sheetName);
          
          todasLasVariantes.push(...resultado.variantes);
          pesta√±asProcesadas.push(sheetName);
          
          // Estad√≠sticas por pesta√±a
          const variantesPesta√±a = resultado.variantes;
          const disponiblesWeb = variantesPesta√±a.filter(v => v.disponible_en_web);
          const noDisponiblesWeb = variantesPesta√±a.filter(v => !v.disponible_en_web);
          
          estadisticasPorPesta√±a.push({
            pesta√±a: sheetName,
            cantidad: variantesPesta√±a.length,
            disponibles_web: disponiblesWeb.length,
            no_disponibles_web: noDisponiblesWeb.length,
            stock: variantesPesta√±a.reduce((sum, v) => sum + v.stock, 0),
            valorCosto: variantesPesta√±a.reduce((sum, v) => sum + (v.costo_proveedor * v.stock), 0),
            valorVenta: variantesPesta√±a.reduce((sum, v) => sum + (v.precio_neto * v.stock), 0),
            ganancia: variantesPesta√±a.reduce((sum, v) => sum + (v.ganancia * v.stock), 0),
            proveedores: [...new Set(variantesPesta√±a.map(v => v.proveedor))],
            tipos: [...new Set(variantesPesta√±a.map(v => v.tipo))],
            // NUEVAS ESTAD√çSTICAS WEB
            productos_sin_sku: noDisponiblesWeb.filter(v => !v.tiene_sku_valido).length,
            productos_sin_stock: noDisponiblesWeb.filter(v => v.tiene_sku_valido && !v.tiene_stock_minimo).length
          });
        } else {
          console.log(`‚ö†Ô∏è Pesta√±a duplicada saltada: ${sheetName} (igual a ${pesta√±asUnicas.get(contenidoHash)})`);
        }
      }
    }

    console.log(`\nüéâ RESUMEN DE SINCRONIZACI√ìN:`);
    console.log(`üìä Pesta√±as procesadas exitosamente: ${pesta√±asProcesadas.length}/${pesta√±asAProcessar.length}`);
    console.log(`üéØ Pesta√±as permitidas para web: Policarbonato y Perfiles √∫nicamente`);
    console.log(`‚ùå Pesta√±as excluidas: ${pesta√±asDetectadas.length - pesta√±asAProcessar.length} (kits, herramientas, accesorios, etc.)`);
    console.log(`üì¶ Total de productos encontrados: ${todasLasVariantes.length}`);
    console.log(`üìã Pesta√±as con datos:`, pesta√±asProcesadas);

    // AN√ÅLISIS DE COMPETITIVIDAD (aplicado a todos los productos)
    const productosSimilares = todasLasVariantes.reduce((grupos, variante) => {
      // Usar campos separados ancho y largo si est√°n disponibles, sino usar dimensiones
      const medidas = variante.ancho && variante.largo ? `${variante.ancho}x${variante.largo}` : variante.dimensiones;
      const claveProducto = `${variante.tipo}-${variante.espesor}-${variante.color}-${medidas}`.toLowerCase().replace(/\s+/g, '-');
      
      if (!grupos[claveProducto]) {
        grupos[claveProducto] = [];
      }
      
      grupos[claveProducto].push(variante);
      return grupos;
    }, {} as Record<string, any[]>);

    // Identificar mejor proveedor por producto
    const analisisProveedores = Object.entries(productosSimilares).map(([clave, variantes]) => {
      const variantesConAnalisis = variantes.map(v => ({
        ...v,
        es_mas_economico: false,
        diferencia_precio: 0
      }));

      const masEconomico = variantesConAnalisis.reduce((min, actual) => 
        actual.costo_proveedor < min.costo_proveedor ? actual : min
      );

      variantesConAnalisis.forEach(v => {
        v.es_mas_economico = v.codigo === masEconomico.codigo;
        v.diferencia_precio = v.costo_proveedor - masEconomico.costo_proveedor;
      });

      return {
        producto_clave: clave,
        producto_nombre: `${masEconomico.tipo} ${masEconomico.espesor} ${masEconomico.color} ${masEconomico.ancho && masEconomico.largo ? `${masEconomico.ancho}x${masEconomico.largo}` : masEconomico.dimensiones}`,
        total_proveedores: variantesConAnalisis.length,
        proveedor_mas_economico: masEconomico.proveedor,
        precio_mas_bajo: masEconomico.costo_proveedor,
        variantes: variantesConAnalisis
      };
    });

    // Agrupar por categor√≠a/pesta√±a y tipo
    const productosPorCategoria = pesta√±asProcesadas.reduce((categorias, pesta√±a) => {
      const nombreCategoria = obtenerNombreCategoria(pesta√±a); // Convertir a nombre amigable
      const variantesPesta√±a = todasLasVariantes.filter(v => v.pesta√±a_origen === pesta√±a);
      
      // Agrupar por tipo dentro de la pesta√±a
      const variantesPorTipo = variantesPesta√±a.reduce((grupos, variante) => {
        const tipo = variante.tipo || 'Producto';
        if (!grupos[tipo]) {
          grupos[tipo] = [];
        }
        
        // Encontrar an√°lisis de este producto
        const analisisProducto = analisisProveedores.find(a => 
          a.variantes.some(v => v.codigo === variante.codigo)
        );
        
        const varianteEnAnalisis = analisisProducto?.variantes.find(v => v.codigo === variante.codigo);
        
        grupos[tipo].push({
          codigo: variante.codigo,
          nombre: `${nombreCategoria} ${tipo} ${variante.espesor} ${variante.color} ${variante.ancho}x${variante.largo}`.trim(),
          espesor: variante.espesor,
          color: variante.color,
          // Campos separados de medidas
          ancho: variante.ancho,
          largo: variante.largo,
          // Mantener dimensiones para compatibilidad
          dimensiones: variante.dimensiones,
          costo_proveedor: variante.costo_proveedor,
          precio_neto: variante.precio_neto,
          precio_con_iva: variante.precio_con_iva,
          ganancia: variante.ganancia,
          margen_ganancia: variante.margen_ganancia,
          stock: variante.stock,
          proveedor: variante.proveedor,
          uso: variante.uso,
          uv_protection: variante.uv_protection,
          garantia: variante.garantia,
          pesta√±a_origen: variante.pesta√±a_origen,
          categoria: nombreCategoria, // Agregar categor√≠a amigable
          es_mas_economico: varianteEnAnalisis?.es_mas_economico || false,
          diferencia_precio: varianteEnAnalisis?.diferencia_precio || 0,
          competidores: analisisProducto?.total_proveedores || 1,
          // CAMPOS DE DISPONIBILIDAD WEB
          disponible_en_web: variante.disponible_en_web,
          tiene_sku_valido: variante.tiene_sku_valido,
          tiene_stock_minimo: variante.tiene_stock_minimo,
          tiene_imagen: variante.tiene_imagen,
          ruta_imagen: variante.ruta_imagen,
          motivo_no_disponible: variante.motivo_no_disponible
        });
        return grupos;
      }, {} as Record<string, any[]>);
      
      // Crear productos agrupados por tipo para esta categor√≠a
      const productosCategoria = Object.entries(variantesPorTipo).map(([tipo, variantes]) => ({
        id: `${nombreCategoria.toLowerCase().replace(/\s+/g, '-')}-${tipo.toLowerCase().replace(/\s+/g, '-')}`,
        nombre: `${nombreCategoria} ${tipo}`,
        descripcion: `${tipo} de la categor√≠a ${nombreCategoria} disponible en diferentes especificaciones`,
        categoria: nombreCategoria,
        tipo: tipo,
        variantes: variantes
      }));
      
      categorias[nombreCategoria] = productosCategoria;
      return categorias;
    }, {} as Record<string, any[]>);

    // Estructura final combinando todas las categor√≠as
    const updatedProducts = {
      productos_por_categoria: productosPorCategoria,
      // Mantener compatibilidad con la estructura anterior
      productos_policarbonato: productosPorCategoria['Sheet1'] || productosPorCategoria['Policarbonato'] || []
    };

    // Estad√≠sticas generales
    const proveedores = [...new Set(todasLasVariantes.map(v => v.proveedor))];
    const tipos = [...new Set(todasLasVariantes.map(v => v.tipo))];
    
    // PRIORIDAD 1: Sincronizar con Supabase
    let supabaseStats = null;
    if (supabaseAdmin) {
      try {
        console.log('üîÑ Sincronizando con Supabase...');
        
        // PASO 1: Limpiar productos obsoletos con SKUs inv√°lidos
        console.log('üßπ Limpiando productos con SKUs inv√°lidos de sincronizaciones anteriores...');
        const textosInvalidosParaDb = [
          'aplicaci√≥n t√≠pica', 'aplicacion tipica', 't√≠pica', 'tipica',
          'descripci√≥n', 'descripcion', 'detalle', 'informaci√≥n', 'informacion',
          'uso t√≠pico', 'uso tipico', 'usos', 'caracter√≠sticas', 'caracteristicas',
          'especificaciones', 'especificacion', 'notas', 'observaciones',
          'medidas t√≠picas', 'medidas tipicas', 'dimensiones t√≠picas',
          'colores disponibles', 'colores', 'acabados', 'terminaciones',
          'instalaci√≥n', 'instalacion', 'montaje', 'aplicaciones',
          'ventajas', 'beneficios', 'propiedades', 'garant√≠a', 'garantia'
        ];
        
        // Construir condiciones OR para cada texto inv√°lido
        let deleteConditions = textosInvalidosParaDb.map(texto => 
          `codigo.ilike.%${texto}%`
        ).join(',');
        
        // Obtener productos actuales para identificar cu√°les eliminar
        try {
          // Obtener todos los productos actuales
          const { data: productosActuales, error: getError } = await supabaseAdmin
            .from('productos')
            .select('codigo, nombre');
          
          if (getError) {
            console.warn('‚ö†Ô∏è Error obteniendo productos actuales:', getError.message);
          } else if (productosActuales) {
            // Filtrar productos con SKUs inv√°lidos
            const skusAEliminar = productosActuales.filter(p => {
              const codigo = (p.codigo || '').toLowerCase();
              
              // Verificar si contiene textos inv√°lidos
              const contieneTextoInvalido = textosInvalidosParaDb.some(texto => 
                codigo.includes(texto.toLowerCase())
              );
              
              // Verificar si es muy corto o no tiene patr√≥n de SKU
              const esMuyCorto = codigo.length < 3;
              const noTienePatronSku = !/[0-9A-Z]/.test(p.codigo || '');
              
              return contieneTextoInvalido || esMuyCorto || noTienePatronSku;
            }).map(p => p.codigo);
            
            if (skusAEliminar.length > 0) {
              console.log(`üóëÔ∏è Eliminando ${skusAEliminar.length} productos con SKUs inv√°lidos:`, skusAEliminar);
              
              // Eliminar productos identificados
              const { error: deleteError } = await supabaseAdmin
                .from('productos')
                .delete()
                .in('codigo', skusAEliminar);
              
              if (deleteError) {
                console.warn('‚ö†Ô∏è Error eliminando productos inv√°lidos:', deleteError.message);
              } else {
                console.log(`‚úÖ ${skusAEliminar.length} productos con SKUs inv√°lidos eliminados correctamente`);
              }
            } else {
              console.log('‚úÖ No se encontraron productos con SKUs inv√°lidos para eliminar');
            }
          }
        } catch (cleanError) {
          console.warn('‚ö†Ô∏è Error en limpieza autom√°tica:', cleanError.message);
        }
        
        // PASO 2: Obtener precios anteriores desde Supabase para detectar cambios
        console.log('üîç Obteniendo precios anteriores para detecci√≥n de cambios...');
        const { data: preciosAnteriores, error: preciosError } = await supabaseAdmin
          .from('productos')
          .select('codigo, precio_con_iva');
        
        const mapaPreciosAnteriores = new Map();
        if (!preciosError && preciosAnteriores) {
          preciosAnteriores.forEach(p => {
            mapaPreciosAnteriores.set(p.codigo, p.precio_con_iva);
          });
        }
        
        // Preparar datos para Supabase con validaciones estrictas
        const productosParaSupabase = todasLasVariantes.map(v => {
          // Formatear dimensiones con unidades correctas
          // Debug: verificar largo antes de formatear
          if ((v.largo || '').toString().includes('3.66')) {
            console.log('üîß ANTES DE FORMATEAR - Largo original:', v.largo);
          }
          
          const espesorFormateado = formatearDimension(v.espesor || '', 'espesor');
          const anchoFormateado = formatearDimension(v.ancho || '', 'ancho');
          const largoFormateado = formatearDimension(v.largo || '', 'largo');
          
          // Debug: verificar largo despu√©s de formatear
          if ((v.largo || '').toString().includes('3.66')) {
            console.log('üîß DESPU√âS DE FORMATEAR - Largo formateado:', largoFormateado);
          }
          
          // Obtener precio anterior para detecci√≥n de cambios
          const precioAnterior = mapaPreciosAnteriores.get(v.codigo) || 0;
          const cambioPrecio = detectarCambioPrecio(v.precio_con_iva || 0, precioAnterior);
          
          // Aplicar validaci√≥n completa para web
          const validacion = validarProductoParaWeb({
            codigo: v.codigo,
            espesor: espesorFormateado,
            ancho: anchoFormateado,
            largo: largoFormateado,
            stock: v.stock || 0,
            ruta_imagen: v.ruta_imagen || '',
            precio_con_iva: v.precio_con_iva || 0,
            precio_anterior: precioAnterior,
            tiene_imagen: v.tiene_imagen
          });
          
          return {
            codigo: v.codigo,
            nombre: v.nombre,
            categoria: v.categoria,
            tipo: v.tipo,
            espesor: espesorFormateado,
            ancho: anchoFormateado,
            largo: largoFormateado,
            color: v.color || '',
            uso: v.uso || '',
            costo_proveedor: v.costo_proveedor || 0,
            precio_neto: v.precio_neto || 0,
            precio_con_iva: v.precio_con_iva || 0,
            ganancia: v.ganancia || 0,
            margen_ganancia: v.margen_ganancia || '0%',
            factor_venta_sobre_costo: v.factor_venta_sobre_costo || 100, // NUEVO CAMPO
            stock: v.stock || 0,
            proveedor: v.proveedor || 'Leker',
            pesta√±a_origen: v.pesta√±a_origen || 'Sheet1',
            orden_original: v.orden_original || 0,
            
            // VALIDACIONES ESTRICTAS NUEVAS
            precio_anterior: precioAnterior,
            tiene_cambio_precio: cambioPrecio.tieneCambio,
            fecha_cambio_precio: cambioPrecio.tieneCambio ? new Date().toISOString() : null,
            porcentaje_cambio_precio: cambioPrecio.porcentajeCambio || 0,
            dimensiones_completas: validacion.dimensionesCompletas,
            cumple_stock_minimo: validacion.cumpleStockMinimo,
            motivos_no_disponible_web: validacion.motivos.length > 0 ? validacion.motivos : null,
            
            // VALIDACIONES EXISTENTES ACTUALIZADAS
            disponible_en_web: validacion.isValid, // Solo disponible si pasa TODAS las validaciones
            tiene_sku_valido: v.codigo && v.codigo !== `${v.pesta√±a_origen}-`,
            tiene_stock_minimo: validacion.cumpleStockMinimo,
            tiene_imagen: validacion.tieneImagenValida,
            ruta_imagen: v.ruta_imagen || null,
            motivo_no_disponible: validacion.isValid ? null : validacion.motivos.join(', '),
            updated_at: new Date().toISOString()
          };
        });

        // Verificar estructura de tabla primero
        console.log('üîç Verificando estructura de tabla...');
        
        // Intentar obtener un registro para ver qu√© columnas existen
        const { data: sampleData, error: sampleError } = await supabaseAdmin
          .from('productos')
          .select('*')
          .limit(1);

        // Verificar si la nueva columna existe
        let tieneColumnaFactor = false;
        if (!sampleError && sampleData && sampleData.length > 0) {
          tieneColumnaFactor = 'factor_venta_sobre_costo' in sampleData[0];
          console.log(`üîç Columna factor_venta_sobre_costo ${tieneColumnaFactor ? 'EXISTE' : 'NO EXISTE'} en Supabase`);
        }

        if (sampleError && !sampleError.message.includes('0 rows')) {
          console.error('‚ùå Error accediendo a tabla productos:', sampleError);
          supabaseStats = { success: false, error: sampleError.message };
        } else {
          // Preparar datos completos para Supabase 
          const productosCompletos = productosParaSupabase.map(producto => {
            // Si la tabla no tiene la columna factor_venta_sobre_costo, excluirla temporalmente
            if (!tieneColumnaFactor) {
              const { factor_venta_sobre_costo, ...productoSinFactor } = producto;
              return productoSinFactor;
            }
            return producto;
          });

          // Usar upsert para evitar problemas de duplicados
          console.log(`üì¶ Sincronizando ${productosCompletos.length} productos con estructura ${tieneColumnaFactor ? 'completa (con factor)' : 'sin factor_venta_sobre_costo'} (upsert)...`);
          
          if (!tieneColumnaFactor) {
            console.log('‚ö†Ô∏è NOTA: Campo factor_venta_sobre_costo excluido - ejecutar: ALTER TABLE productos ADD COLUMN factor_venta_sobre_costo NUMERIC DEFAULT 100;');
          }
          
          // Upsert de a lotes para evitar timeouts
          const batchSize = 10; // Reducido para datos m√°s complejos
          let inserted = 0;
          let errors = 0;
          
          for (let i = 0; i < productosCompletos.length; i += batchSize) {
            const batchProducts = productosCompletos.slice(i, i + batchSize);
            
            // Filtrar duplicados dentro del mismo lote por codigo
            const uniqueProductsMap = new Map();
            batchProducts.forEach(p => {
              if (!uniqueProductsMap.has(p.codigo)) {
                uniqueProductsMap.set(p.codigo, p);
              } else {
                console.warn(`‚ö†Ô∏è Duplicado encontrado en lote: ${p.codigo} - usando la primera ocurrencia`);
              }
            });
            
            const batch = Array.from(uniqueProductsMap.values()).map(p => ({
              ...p,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            }));
            
            const { error: batchError } = await supabaseAdmin
              .from('productos')
              .upsert(batch, { onConflict: 'codigo' });

            if (batchError) {
              console.error(`‚ùå Error en lote ${i / batchSize + 1}:`, batchError.message);
              errors += batch.length;
            } else {
              inserted += batch.length;
              console.log(`‚úÖ Lote ${i / batchSize + 1} insertado (${batch.length} productos)`);
            }
          }

          if (errors === 0) {
            console.log(`‚úÖ Todos los productos sincronizados con Supabase (${inserted})`);
            supabaseStats = { 
              success: true, 
              inserted: inserted,
              errors: errors,
              timestamp: new Date().toISOString()
            };
          } else {
            console.log(`‚ö†Ô∏è Sincronizaci√≥n parcial: ${inserted} exitosos, ${errors} errores`);
            supabaseStats = { 
              success: false, 
              inserted: inserted,
              errors: errors,
              error: `${errors} productos no se pudieron insertar`,
              timestamp: new Date().toISOString()
            };
          }
        }
      } catch (supabaseError) {
        console.error('‚ùå Error en sincronizaci√≥n Supabase:', supabaseError);
        supabaseStats = { success: false, error: supabaseError.message };
      }
    } else {
      console.warn('‚ö†Ô∏è Supabase admin client no disponible');
      supabaseStats = { success: false, error: 'Supabase no configurado' };
    }
    
    // BACKUP: Guardar archivo JSON como respaldo
    const filePath = path.join(process.cwd(), 'src', 'data', 'productos-policarbonato.json');
    const backupPath = path.join(process.cwd(), 'src', 'data', `productos-backup-${Date.now()}.json`);
    
    try {
      // Crear backup del archivo actual
      if (fs.existsSync(filePath)) {
        const currentData = fs.readFileSync(filePath, 'utf8');
        fs.writeFileSync(backupPath, currentData, 'utf8');
        console.log('üíæ Backup JSON creado:', path.basename(backupPath));
      }
      
      // Guardar nuevos datos como JSON de respaldo
      fs.writeFileSync(filePath, JSON.stringify(updatedProducts, null, 2), 'utf8');
      console.log('üíæ Archivo JSON de respaldo actualizado');
    } catch (jsonError) {
      console.warn('‚ö†Ô∏è Error guardando backup JSON:', jsonError);
    }

    // Estad√≠sticas de competitividad
    const productosConCompetencia = analisisProveedores.filter(a => a.total_proveedores > 1);
    const ahorrosPotenciales = analisisProveedores
      .flatMap(a => a.variantes.filter(v => !v.es_mas_economico))
      .reduce((sum, v) => sum + (v.diferencia_precio * v.stock), 0);

    // Calcular estad√≠sticas de disponibilidad web
    const productosDisponiblesWeb = todasLasVariantes.filter(v => v.disponible_en_web);
    const productosNoDisponiblesWeb = todasLasVariantes.filter(v => !v.disponible_en_web);
    
    // Calcular estad√≠sticas generales
    const stats = {
      // Informaci√≥n general
      totalPesta√±asProcesadas: pesta√±asProcesadas.length,
      totalPesta√±asDetectadas: pesta√±asDetectadas.length,
      pesta√±asProcesadas: pesta√±asProcesadas,
      totalTiposProductos: tipos.length,
      totalVariantes: todasLasVariantes.length,
      totalProveedores: proveedores.length,
      totalStock: todasLasVariantes.reduce((sum, v) => sum + v.stock, 0),
      
      // NUEVAS ESTAD√çSTICAS WEB
      productosDisponiblesWeb: productosDisponiblesWeb.length,
      productosNoDisponiblesWeb: productosNoDisponiblesWeb.length,
      porcentajeDisponibilidadWeb: ((productosDisponiblesWeb.length / todasLasVariantes.length) * 100).toFixed(2) + '%',
      stockDisponibleWeb: productosDisponiblesWeb.reduce((sum, v) => sum + v.stock, 0),
      valorInventarioDisponibleWeb: productosDisponiblesWeb.reduce((sum, v) => sum + (v.costo_proveedor * v.stock), 0),
      
      // Informaci√≥n financiera
      valorInventarioCosto: todasLasVariantes.reduce((sum, v) => sum + (v.costo_proveedor * v.stock), 0),
      valorInventarioVenta: todasLasVariantes.reduce((sum, v) => sum + (v.precio_neto * v.stock), 0),
      gananciaTotal: todasLasVariantes.reduce((sum, v) => sum + (v.ganancia * v.stock), 0),
      
      // An√°lisis de competitividad
      analisis_competitividad: {
        productos_unicos: analisisProveedores.length,
        productos_con_competencia: productosConCompetencia.length,
        productos_monopolio: analisisProveedores.length - productosConCompetencia.length,
        ahorro_potencial_total: ahorrosPotenciales,
        resumen_competencia: analisisProveedores.map(a => ({
          producto: a.producto_nombre,
          proveedores_disponibles: a.total_proveedores,
          proveedor_mas_economico: a.proveedor_mas_economico,
          precio_mas_bajo: a.precio_mas_bajo,
          diferencia_maxima: Math.max(...a.variantes.map(v => v.diferencia_precio))
        })).filter(r => r.proveedores_disponibles > 1)
      },
      
      // NUEVAS ESTAD√çSTICAS POR PESTA√ëA
      estadisticasPorPesta√±a: estadisticasPorPesta√±a,
      estadisticasPorTipo: tipos.map(tipo => {
        const variantesTipo = todasLasVariantes.filter(v => v.tipo === tipo);
        return {
          tipo,
          cantidad: variantesTipo.length,
          stock: variantesTipo.reduce((sum, v) => sum + v.stock, 0),
          valorCosto: variantesTipo.reduce((sum, v) => sum + (v.costo_proveedor * v.stock), 0),
          valorVenta: variantesTipo.reduce((sum, v) => sum + (v.precio_neto * v.stock), 0),
          ganancia: variantesTipo.reduce((sum, v) => sum + (v.ganancia * v.stock), 0)
        };
      }),
      estadisticasPorProveedor: proveedores.map(proveedor => {
        const productosProveedor = todasLasVariantes.filter(v => v.proveedor === proveedor);
        return {
          proveedor,
          cantidad: productosProveedor.length,
          stock: productosProveedor.reduce((sum, v) => sum + v.stock, 0),
          valorCosto: productosProveedor.reduce((sum, v) => sum + (v.costo_proveedor * v.stock), 0),
          valorVenta: productosProveedor.reduce((sum, v) => sum + (v.precio_neto * v.stock), 0),
          ganancia: productosProveedor.reduce((sum, v) => sum + (v.ganancia * v.stock), 0)
        };
      }),
      
      sincronizadoEn: new Date().toISOString(),
      fuente: 'google_sheets_csv_multi_tab',
      pesta√±as_sincronizadas: pesta√±asProcesadas
    };

    console.log('üìä Sincronizaci√≥n completada:', stats);
    console.log('üóÑÔ∏è Estado Supabase:', supabaseStats);

    return NextResponse.json({
      success: true,
      message: `üéâ Sincronizaci√≥n completada: ${pesta√±asProcesadas.length} pesta√±as procesadas (solo Policarbonato y Perfiles)`,
      stats,
      backupCreated: path.basename(backupPath),
      instructions: `Se procesaron ${pesta√±asProcesadas.length} pesta√±as permitidas: ${pesta√±asProcesadas.join(', ')}. Excluidas ${pesta√±asDetectadas.length - pesta√±asAProcessar.length} pesta√±as (kits, herramientas, accesorios). Solo Policarbonato y Perfiles aparecen en web.`,
      supabase_sync: supabaseStats,
      pricing_info: {
        costo_proveedor: 'Precio del proveedor desde la columna "Costo por proveedor"',
        factor_venta_sobre_costo: 'Factor aplicado sobre el costo para determinar precio de venta (ej: 140% = costo √ó 1.40)',
        precio_neto: 'Precio de venta sin IVA calculado usando: Costo √ó (Factor/100)',
        precio_con_iva: 'Precio final con IVA para el cliente (precio_neto √ó 1.19)',
        ganancia: 'Diferencia entre precio de venta y costo del proveedor',
        margen_ganancia: 'Porcentaje de ganancia sobre el precio de venta',
        formula_calculo: 'Precio Venta = Costo Proveedor √ó (Factor Venta Sobre Costo / 100)'
      }
    });

  } catch (error) {
    console.error('‚ùå Error en sincronizaci√≥n CSV m√∫ltiples pesta√±as:', error);
    
    return NextResponse.json({
      success: false,
      error: 'Error interno en la sincronizaci√≥n CSV',
      details: error instanceof Error ? error.message : 'Error desconocido'
    }, { status: 500 });
  }
}