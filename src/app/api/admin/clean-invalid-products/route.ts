import { NextResponse } from 'next/server';
import { supabaseAdmin } from '@/lib/supabase';

export async function POST() {
  try {
    console.log('üßπ Iniciando limpieza manual de productos con SKUs inv√°lidos...');
    
    if (!supabaseAdmin) {
      return NextResponse.json({
        success: false,
        error: 'Supabase admin client no disponible'
      }, { status: 500 });
    }

    // Lista de textos inv√°lidos que no son SKUs reales
    const textosInvalidosParaDb = [
      'aplicaci√≥n t√≠pica', 'aplicacion tipica', 't√≠pica', 'tipica',
      'descripci√≥n', 'descripcion', 'detalle', 'informaci√≥n', 'informacion',
      'uso t√≠pico', 'uso tipico', 'usos', 'caracter√≠sticas', 'caracteristicas',
      'especificaciones', 'especificacion', 'notas', 'observaciones',
      'medidas t√≠picas', 'medidas tipicas', 'dimensiones t√≠picas',
      'colores disponibles', 'colores', 'acabados', 'terminaciones',
      'instalaci√≥n', 'instalacion', 'montaje', 'aplicaciones',
      'ventajas', 'beneficios', 'propiedades', 'garant√≠a', 'garantia',
      'falso', 'test', 'prueba', 'ejemplo', 'sample'
    ];

    // Obtener todos los productos actuales
    const { data: productosActuales, error: getError } = await supabaseAdmin
      .from('productos')
      .select('codigo, nombre');
    
    if (getError) {
      console.error('‚ùå Error obteniendo productos actuales:', getError.message);
      return NextResponse.json({
        success: false,
        error: 'Error obteniendo productos de la base de datos'
      }, { status: 500 });
    }

    if (!productosActuales || productosActuales.length === 0) {
      return NextResponse.json({
        success: true,
        message: 'No hay productos en la base de datos para limpiar',
        productosEliminados: 0
      });
    }

    // Filtrar productos con SKUs inv√°lidos
    const productosAEliminar = productosActuales.filter(p => {
      const codigo = (p.codigo || '').toLowerCase().trim();
      const codigoOriginal = p.codigo || '';
      
      // Verificar si contiene textos inv√°lidos
      const contieneTextoInvalido = textosInvalidosParaDb.some(texto => 
        codigo.includes(texto.toLowerCase())
      );
      
      // Verificar si es muy corto
      const esMuyCorto = codigo.length < 3;
      
      // Verificar si no tiene patr√≥n de SKU v√°lido (debe tener n√∫meros o letras may√∫sculas)
      const noTienePatronSku = !/[0-9A-Z]/.test(codigoOriginal);
      
      // Verificar si es solo un prefijo (termina en - o _)
      const esSoloPrefijo = codigo.endsWith('-') || codigo.endsWith('_');
      
      return contieneTextoInvalido || esMuyCorto || noTienePatronSku || esSoloPrefijo;
    });

    console.log(`üîç Encontrados ${productosAEliminar.length} productos con SKUs inv√°lidos de ${productosActuales.length} total`);

    if (productosAEliminar.length === 0) {
      return NextResponse.json({
        success: true,
        message: 'No se encontraron productos con SKUs inv√°lidos para eliminar',
        productosEliminados: 0,
        productosRevisados: productosActuales.length
      });
    }

    // Mostrar qu√© productos se van a eliminar
    const skusAEliminar = productosAEliminar.map(p => p.codigo);
    console.log('üóëÔ∏è SKUs a eliminar:', skusAEliminar);

    // Eliminar productos identificados
    const { error: deleteError, count } = await supabaseAdmin
      .from('productos')
      .delete()
      .in('codigo', skusAEliminar);
    
    if (deleteError) {
      console.error('‚ùå Error eliminando productos inv√°lidos:', deleteError.message);
      return NextResponse.json({
        success: false,
        error: 'Error eliminando productos inv√°lidos: ' + deleteError.message,
        productosIdentificados: productosAEliminar.length
      }, { status: 500 });
    }

    console.log(`‚úÖ ${skusAEliminar.length} productos con SKUs inv√°lidos eliminados correctamente`);

    return NextResponse.json({
      success: true,
      message: `Limpieza completada exitosamente`,
      productosEliminados: skusAEliminar.length,
      productosRevisados: productosActuales.length,
      skusEliminados: skusAEliminar
    });

  } catch (error) {
    console.error('üí• Error en limpieza manual:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Error desconocido'
    }, { status: 500 });
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Endpoint de limpieza de productos. Use POST para ejecutar la limpieza.'
  });
}